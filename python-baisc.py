# Python คือภาษาโปรแกรมที่ใช้เขียนโปรแกรมคอมพิวเตอร์
# การทำงานของ Python จะทำงานตามลำดับบรรทัดที่เขียนไว้
# เรียนการทำงานแบบนี้ว่า Sequential Execution และภาษาแบบนี้เรียกว่า Scripting Language
# ซึ่งคือแบบเดียวกับ JavaScript ที่เรียนไปแล้ว
# Python เป็นภาษาโปรแกรมที่มีความยืดหยุ่นสูง และใช้งานง่าย
# สามารถใช้เขียนโปรแกรมได้หลากหลายประเภท เช่น เว็บแอปพลิเคชัน, แอปพลิเคชันเดสก์ท็อป, แอปพลิเคชันมือถือ, การวิเคราะห์ข้อมูล, ปัญญาประดิษฐ์, และอื่น ๆ
# Python มีไวยากรณ์ที่เข้าใจง่าย และมีไลบรารี่มากมายที่ช่วยในการพัฒนาโปรแกรม
# นอกจากนี้ Python ยังเป็นภาษาโปรแกรมที่ได้รับความนิยมมากในวงการวิทยาศาสตร์ข้อมูลและปัญญาประดิษฐ์
# scope คือขอบเขตของตัวแปรที่เราสามารถเข้าถึงได้
# ใน Python มี scope หลัก ๆ อยู่ 4 ประเภท ได้แก่
# 1. Local Scope: ตัวแปรที่ประกาศภายในฟังก์ชัน จะสามารถเข้าถึงได้เฉพาะภายในฟังก์ชันนั้น ๆ เท่านั้น
# 2. Enclosing Scope: ตัวแปรที่ประกาศในฟังก์ชันที่อยู่ภายนอกฟังก์ชันปัจจุบัน จะสามารถเข้าถึงได้
# 3. Global Scope: ตัวแปรที่ประกาศนอกฟังก์ชัน จะสามารถเข้าถึงได้จากทุกที่ในโปรแกรม
# 4. Built-in Scope: ตัวแปรที่มีอยู่ใน Python โดยตรง เช่น print(), len() เป็นต้น
# โดยจะใช้การเว้น 1 tab หรือ 4 space ในการจัดระเบียบโค้ด

# START: การเขียนโปรแกรม Python เบื้องต้น

# ตัวแปร จะต้องประกาศก่อนใช้งาน และไม่ต้องระบุชนิดของตัวแปร
# Python จะกำหนดชนิดของตัวแปรให้โดยอัตโนมัติ
# การประกาศตัวแปรใน Python จะใช้เครื่องหมาย = เช่น a = 10
a = 10 # เทียบกับ JavaScript จะใช้ let a = 10;
b = 20 # เทียบกับ JavaScript จะใช้ let b = 20;
c = a + b # เทียบกับ JavaScript จะใช้ let c = a + b;
print("ผลลัพธ์ของ a + b =", c) # แสดงผลลัพธ์ของ c

# การประกาศตัวแปรแบบหลายตัวแปรในบรรทัดเดียว
x, y, z = 1, 2, "This is a string" # เทียบกับ JavaScript จะใช้ let x = 1, y = 2, z = "This is a string";
print("ค่าของ x =", x)
print("ค่าของ y =", y)
print("ค่าของ z =", z)

# control flow คือการควบคุมการทำงานของโปรแกรม
# ใน Python มี control flow หลัก ๆ อยู่ 3 ประเภท ได้แก่
# 1. if-else: ใช้ในการตรวจสอบเงื่อนไข
# 2. for loop: ใช้ในการวนลูป
# 3. while loop: ใช้ในการวนลูปจนกว่าเงื่อนไขจะเป็นจริง
# การใช้ if-else ใน Python
age = 18
if age >= 18: # เทียบกับ JavaScript จะใช้ if (age >= 18) { ... }
	print("คุณมีอายุ 18 ปีขึ้นไป")
else: # เทียบกับ JavaScript จะใช้ else { ... }
	print("คุณยังไม่ถึง 18 ปี")
# การใช้ for loop ใน Python
for i in range(5):  # range(5) จะสร้างลูปตั้งแต่ 0 ถึง 4 เทียบกับ JavaScript จะใช้ for (let i = 0; i < 5; i++) { ... }
	print("ลูปที่", i)
# การใช้ while loop ใน Python
count = 0
while count < 5: # เทียบกับ JavaScript จะใช้ while (count < 5) { ... }
	print("นับที่", count)
	count += 1

# การใช้ฟังก์ชันใน Python
def greet(name): # เทียบกับ JavaScript จะใช้ function greet(name) { ... }
	"""ฟังก์ชันนี้ใช้ในการทักทาย""" # docstring ที่อธิบายการทำงานของฟังก์ชัน
	print("สวัสดี", name)
# การเรียกใช้ฟังก์ชัน
greet("นักเรียน")

# การใช้โมดูลใน Python
# โมดูลคือไฟล์ที่เก็บฟังก์ชันและตัวแปรที่สามารถนำมาใช้ในโปรแกรมอื่นได้
# การนำเข้าโมดูลใน Python ใช้คำสั่ง import โดยทั่วไปจะอยู่ในบรรทัดแรกของไฟล์ เพื่อให้สามารถใช้ฟังก์ชันและตัวแปรที่อยู่ในโมดูลนั้นได้ตลอดโปรแกรม
import math  # นำเข้าโมดูล math ที่มีฟังก์ชันทางคณิตศาสตร์
print("ค่าของ pi =", math.pi)  # แสดงค่าของ pi

import random  # นำเข้าโมดูล random ที่มีฟังก์ชันสุ่มตัวเลข
random_number = random.randint(1, 10)  # สุ่มตัวเลขระหว่าง 1 ถึง 10
print("หมายเลขสุ่มที่ได้คือ", random_number)  # แสดงหมายเลขสุ่มที่ได้

import datetime  # นำเข้าโมดูล datetime ที่มีฟังก์ชันเกี่ยวกับวันที่และเวลา
current_time = datetime.datetime.now()  # รับวันที่และเวลาปัจจุบัน
print("วันที่และเวลาปัจจุบันคือ", current_time)  # แสดงวันที่และเวลาปัจจุบัน

import os  # นำเข้าโมดูล os ที่มีฟังก์ชันเกี่ยวกับระบบปฏิบัติการ
# read/write file
file_path = "example.txt"  # กำหนดเส้นทางไฟล์
# เขียนข้อมูลลงในไฟล์
with open(file_path, "w") as file:  # เปิดไฟล์ในโหมดเขียน
	file.write("Hello, World!")  # เขียนข้อความลงในไฟล์
# อ่านข้อมูลจากไฟล์
with open(file_path, "r") as file:  # เปิดไฟล์ในโหมดอ่าน
	content = file.read()  # อ่านข้อมูลจากไฟล์
	print("เนื้อหาของไฟล์:", content)  # แสดงเนื้อหาของไฟล์
# ลบไฟล์
#if os.path.exists(file_path):  # ตรวจสอบว่าไฟล์มีอยู่หรือไม่
#	os.remove(file_path)  # ลบไฟล์

# json คือรูปแบบการจัดเก็บข้อมูลที่ใช้กันอย่างแพร่หลาย
# ใน Python สามารถใช้โมดูล json ในการอ่านและเขียนข้อมูลในรูปแบบ JSON ได้
import json  # นำเข้าโมดูล json
# การเขียนข้อมูลลงในไฟล์ JSON
data = {
	"name": "นักเรียน",
	"age": 20,
	"major": "Computer Science"
}
with open("data.json", "w") as json_file:  # เปิดไฟล์ JSON ในโหมดเขียน
	json.dump(data, json_file)  # เขียนข้อมูลลงในไฟล์ JSON
# การอ่านข้อมูลจากไฟล์ JSON
with open("data.json", "r") as json_file:  # เปิดไฟล์ JSON ในโหมดอ่าน
	data_loaded = json.load(json_file)  # อ่านข้อมูลจากไฟล์ JSON
	print("ข้อมูลที่อ่านจากไฟล์ JSON:", data_loaded)  # แสดงข้อมูลที่อ่านจากไฟล์ JSON

# การจัดการข้อผิดพลาดใน Python
# การจัดการข้อผิดพลาดใน Python ใช้ try-except block
try:
	# ลองทำการหารด้วยศูนย์
	result = 10 / 1
	print("ผลลัพธ์คือ", result, "(try)")
except ZeroDivisionError as e:  # จับข้อผิดพลาดที่เกิดขึ้น
	print("เกิดข้อผิดพลาด:", e)
else:  # ถ้าไม่มีข้อผิดพลาด
	print("ผลลัพธ์คือ", result, "(else)")
finally:  # จะทำงานเสมอไม่ว่าจะเกิดข้อผิดพลาดหรือไม่
	print("การจัดการข้อผิดพลาดเสร็จสิ้น (finnaly)")

# END: การเขียนโปรแกรม Python เบื้องต้น